[[plugins]]
repo = "Shougo/dein.vim"

[[plugins]]
repo = "jacoborus/tender"
hook_add = """
autocmd MyAutoCmd VimEnter * nested colorscheme tender
"""

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = "tpope/vim-fugitive"
hook_add = """
noremap <Space>gp :Gpush<CR>
noremap <Space>gc :Gcommit<CR>
noremap <Space>ga :write<CR>:Git! add -A<CR>
noremap <Space>gs :Gstatus<CR>
noremap <Space>gf :Gfetch<CR>
"""

[[plugins]]
repo = "ryanoasis/vim-devicons"

[[plugins]]
repo = "neoclide/coc.nvim"
merged = 0
rev = "release"
hook_add = """
set updatetime=300
nnoremap <silent><space><space> :call <SID>show_documentation()<CR>
nnoremap <silent> <C-p> :<C-u>CocList files<CR>
nnoremap <silent> <C-s> :<C-u>CocList symbols<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

command! -nargs=0 Format :call CocAction('format')
command! -nargs=0 Rename :call CocAction('rename')
"""

hook_post_source = """
nnoremap <silent> gd <Plug>(coc-definition)
nnoremap <silent> gy <Plug>(coc-type-definition)
nnoremap <silent> gi <Plug>(coc-implementation)
nnoremap <silent> gr <Plug>(coc-references)

nnoremap <space>rn <Plug>(coc-rename)
"""

[[plugins]]
repo = "itchyny/lightline.vim"
hook_add = """
let g:lightline = {
      \ 'colorscheme': 'tender',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename', 'currentfunction' ] ],
      \   'right': [ [ 'percent' ], 
      \              [ 'iregularfileformat', 'iregularfileencoding', 'filetype' ],
      \              [ 'cocstatus' ]]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'readonly': 'LightlineReadonly',
      \   'modified': 'LightlineModified',
      \   'filename': 'LightlineFilename',
      \   'iregularfileencoding': 'LightLineFileEncoding',
      \   'iregularfileformat': 'LightLineFileFormat',
      \   'cocstatus': 'coc#status',
      \   'currentfunction': 'CocCurrentFunction'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! LightlineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightlineReadonly()
  if &filetype == "help"
    return "help"
  elseif &filetype == "nertree"
    return "NERDTree"
  elseif &readonly
    return "ro"
  else
    return ""
  endif
endfunction

function! LightlineFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightLineFileEncoding() 
  if &fileencoding != "utf-8" 
    return &fileencoding
  else
    return ""
  endif
endfunction

function! LightLineFileFormat()
  if &fileformat != "unix" 
    return &fileformat
  else
    return ""
  endif
endfunction

function! LightLineCoc() 
  return exists('*coc#status') ? coc#status() : ''
endfunction

function! CocCurrentFunction()
  return get(b:, 'coc_current_function', '')
endfunction

"""

[[plugins]]
repo = "ap/vim-buftabline"

[[plugins]]
repo = "Shougo/context_filetype.vim"

